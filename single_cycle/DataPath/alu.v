module alu(op_num1, op_num2, alu_ctrl_out, zero, alu_out);
    input      [31:0]  op_num1;
    input      [31:0]  op_num2;
    input      [ 3:0]  alu_ctrl_out;
    output             zero;           // zero genenrated by alu
    output reg [31:0]  alu_out;        // alu_out generated by alu

    parameter AND   = 4'b0000;
    parameter OR    = 4'b0001;
    parameter ADD   = 4'b0010;
    parameter SUB   = 4'b0110;
    parameter SLT   = 4'b0111;
    parameter XOR   = 4'b0011;
    parameter LUI   = 4'b0101;

    always @(*) 
    begin
        case (alu_ctrl_out)
            AND : alu_out = op_num1 & op_num2;
            OR  : alu_out = op_num1 | op_num2;
            ADD : alu_out = op_num1 + op_num2;
            SUB : alu_out = op_num1 - op_num2;
            XOR : alu_out = op_num1 ^ op_num2;
            LUI : alu_out = op_num1 + (op_num2 << 16);
            SLT:
            begin
                if (op_num1 < op_num2)
                    alu_out = 32'b1;
                else
                    alu_out = 32'b0;
            end
        endcase
    end

    assign zero = (alu_out == 0) ? 1 : 0;

endmodule