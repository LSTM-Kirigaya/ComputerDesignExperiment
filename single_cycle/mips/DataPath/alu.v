module alu(op_num1, op_num2, alu_ctrl_out, zero, alu_out);
    input      [31:0]  op_num1;
    input      [31:0]  op_num2;
    input      [ 3:0]  alu_ctrl_out;
    output             zero;           // zero genenrated by alu
    output reg [31:0]  alu_out;        // result generated by alu

    parameter AND   = 4'b0000;
    parameter OR    = 4'b0001;
    parameter ADD   = 4'b0010;
    parameter SUB   = 4'b0110;
    parameter SLT   = 4'b0111;
    parameter XOR   = 4'b0011;
    parameter LUI   = 4'b0101;

    assign zero = (result == 32'b0);

    always @(*) 
    begin
        case (alu_ctrl_out)
            ADN : result = a & b;
            OR  : result = a | b;
            ADD : result = a + b;
            SUB : result = a - b;
            XOR : result = a ^ b;
            LUI : result = a + (b << 16);
            SLT:
            begin
                if (a < b)
                    result = 32'b1;
                else
                    result = 32'b0;
            end

        endcase
    end


endmodule