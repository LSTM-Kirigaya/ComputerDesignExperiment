module alu(op_num1, op_num2, shamt, alu_ctrl_out, zero, alu_out);
    input      [31:0]  op_num1;        // rs
    input      [31:0]  op_num2;        // rt
    input      [ 3:0]  alu_ctrl_out;
    input      [ 4:0]  shamt;
    output             zero;           // zero genenrated by alu
    output reg [31:0]  alu_out;        // alu_out generated by alu

    parameter ADD   = 4'b0010;
    parameter SUB   = 4'b0110;
    parameter AND   = 4'b0000;
    parameter OR    = 4'b0001;
    parameter SLT   = 4'b0111;
    parameter XOR   = 4'b0011;
    parameter LUI   = 4'b0101;
    parameter SLL   = 4'b1000;

    always @(*) 
    begin
        case (alu_ctrl_out)
            AND : alu_out = op_num1 & op_num2;
            OR  : 
            begin
                alu_out = op_num1 | op_num2;
                // $display("op_num1 : %h | op_num2 : %h | or out : %h", op_num1, op_num2, alu_out);
            end
            ADD : 
            begin
                alu_out = op_num1 + op_num2;
                // $display("op_num1 : %h | op_num2 : %h | add out : %h", op_num1, op_num2, alu_out);
            end
            SUB : 
            begin
                alu_out = op_num1 - op_num2;
                // $display("op_num1 : %h | op_num2 : %h | sub out : %h", op_num1, op_num2, alu_out);
            end
            XOR : alu_out = op_num1 ^ op_num2;
            LUI : 
            begin
                alu_out = {op_num2, 16'b0000_0000};
                // $display("op_num2 : %h | lui out : %h", op_num2, alu_out);
            end
            SLL : 
            begin
                alu_out = op_num2 << shamt;
                // $display("op_num2 : %h | sll out : %h", op_num2, alu_out);
            end
            SLT : 
            begin
                alu_out = (op_num1 < op_num2) ? 32'b1 : 32'b0;
                // $display("op_num1 : %h | op_num2 : %h | slt out : %h", op_num1, op_num2, alu_out);
            end
        endcase
    end

    assign zero = (alu_out == 0) ? 1 : 0;

endmodule